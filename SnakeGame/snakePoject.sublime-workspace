{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Power",
				"PowerUp_eventWipe\tfunction"
			],
			[
				"after",
				"after\tfunction"
			],
			[
				"Poer",
				"PowerUp_events\tstatement"
			],
			[
				"tête",
				"têteOffset\tstatement"
			],
			[
				"vit",
				"vitesse_actuelle\tstatement"
			],
			[
				"PowerUp",
				"PowerUp_events\tstatement"
			],
			[
				"int",
				"intTimePowa\tstatement"
			],
			[
				"Power_",
				"PowerUp_onMap\tstatement"
			],
			[
				"temp",
				"tempsPwr\tstatement"
			],
			[
				"P",
				"PowerUp_coord\tstatement"
			],
			[
				"Po",
				"PowerUp_onMap\tstatement"
			],
			[
				"snake_",
				"snake_peauMorte\tstatement"
			],
			[
				"snake",
				"snake_peauMorte\tstatement"
			],
			[
				"Pwer",
				"PowerUp_onMap\tstatement"
			],
			[
				"Powerp",
				"PowerUp_onMap"
			],
			[
				"sna",
				"snake_peauMorte\tstatement"
			],
			[
				"Shpa",
				"Shape_Base\tstatement"
			],
			[
				"cre",
				"create_oval\tfunction"
			],
			[
				"Cell",
				"CellLARG"
			],
			[
				"score",
				"score_Base\tstatement"
			],
			[
				"vitess",
				"vitesse_Base\tstatement"
			],
			[
				"Top",
				"TopScoreSec\tstatement"
			],
			[
				"TopScore",
				"TopScoreSec"
			],
			[
				"TopSco",
				"TopScoreSec\tstatement"
			],
			[
				"finda",
				"find_withtag\tfunction"
			],
			[
				"segme",
				"segmentCoord\tfunction"
			],
			[
				"new",
				"newTête_Shape\tstatement"
			],
			[
				"item",
				"itemconfig"
			],
			[
				"gri",
				"gridOffX\tstatement"
			],
			[
				"Fil",
				"FileNotFoundError\tclass"
			],
			[
				"UI",
				"UI_update"
			],
			[
				"timer",
				"timerEvent\tstatement"
			],
			[
				"long",
				"longueur"
			],
			[
				"sc",
				"score_actuelle\tstatement"
			],
			[
				"n",
				"n"
			],
			[
				"temps",
				"temps_dernPomme\tstatement"
			],
			[
				"vitesse",
				"vitesse_Base\tstatement"
			],
			[
				"inpu",
				"inputManager\tfunction"
			],
			[
				"pomm",
				"pommeGrats\tfunction"
			],
			[
				"mess",
				"message_congrats\tstatement"
			],
			[
				"Main",
				"MainEvent\tstatement"
			],
			[
				"create",
				"create_rectangle\tfunction"
			],
			[
				"po",
				"pommeCoord\tstatement"
			],
			[
				"Game",
				"GAMEOVER"
			],
			[
				"têe",
				"têteCoords\tstatement"
			],
			[
				"re",
				"return\tkeyword"
			],
			[
				"gridCell",
				"gridCell_10pX\tstatement"
			],
			[
				"segmen",
				"segmentDraw\tstatement"
			],
			[
				"inde",
				"indexToCoord_slash\tstatement"
			],
			[
				"grid",
				"gridCell_10pX\tstatement"
			],
			[
				"GAME",
				"GAMEOVER"
			],
			[
				"te",
				"text"
			],
			[
				"direct",
				"direction\tstatement"
			],
			[
				"grido",
				"gridOffY\tstatement"
			],
			[
				"max",
				"maxX\tstatement"
			],
			[
				"offset",
				"offsetY_\tstatement"
			],
			[
				"UNI",
				"UNIQUES_funcRef\tstatement"
			],
			[
				"UNIQUU",
				"UNIQUES_funcRef\tstatement"
			],
			[
				"fil",
				"filteredKeys"
			],
			[
				"act",
				"actionSetting\tfunction"
			],
			[
				"fi",
				"filteredKeys\tstatement"
			],
			[
				"W",
				"W"
			],
			[
				"tra",
				"traducteur"
			],
			[
				"keyGrou",
				"keysGroupes_probe"
			],
			[
				"Pre",
				"Press_filterSwitch\tstatement"
			],
			[
				"crea",
				"create_keyGroupe\tfunction"
			],
			[
				"keyP",
				"keysGroupes_probe\tstatement"
			],
			[
				"for",
				"for\tFor Loop"
			],
			[
				"keyPre",
				"KeysPressed\tstatement"
			],
			[
				"keys",
				"KeysPressed"
			],
			[
				"keyG",
				"keysGroupes\tstatement"
			],
			[
				"frame",
				"frameSpan\tstatement"
			],
			[
				"cloc",
				"clockSecondes\tstatement"
			],
			[
				"clock",
				"clockSecondes\tstatement"
			],
			[
				"anim",
				"animeCrankShaft\tfunction"
			],
			[
				"Index",
				"IndexError\tclass"
			],
			[
				"elem",
				"elemAlphaID\tstatement"
			],
			[
				"teste",
				"testeIndex\tstatement"
			],
			[
				"exec",
				"execGroupe\tstatement"
			],
			[
				"class",
				"class_function\tstatement"
			],
			[
				"ray",
				"ray_rotation\tstatement"
			],
			[
				"len",
				"lenKeys\tstatement"
			],
			[
				"master",
				"masterKey\tstatement"
			],
			[
				"event",
				"event_bindings\tstatement"
			],
			[
				"eve",
				"event_bindings\tstatement"
			],
			[
				"dict",
				"dictKey\tstatement"
			],
			[
				"key",
				"key_bindings\tstatement"
			],
			[
				"rota",
				"rotationDroite"
			],
			[
				"Key",
				"KeyError\tclass"
			],
			[
				"bin",
				"bindings\tstatement"
			],
			[
				"rayo",
				"rayonStep\tparam"
			],
			[
				"Entry",
				"EntryTexte\tstatement"
			],
			[
				"En",
				"EntrerTexte"
			],
			[
				"Entr",
				"EntryTexte\tstatement"
			],
			[
				"texte",
				"texteINDEX\tstatement"
			],
			[
				"rad",
				"angleRadial"
			],
			[
				"text",
				"texteINDEX\tstatement"
			],
			[
				"tk",
				"tkRotation\tfunction"
			],
			[
				"tex",
				"texteINDEX\tstatement"
			],
			[
				"spira",
				"spiral_anime\tfunction"
			],
			[
				"spir",
				"spiral_anime\tfunction"
			],
			[
				"AV",
				"ACTIVE\tparam"
			],
			[
				"dest",
				"destCell"
			],
			[
				"des",
				"destination_courante\tstatement"
			],
			[
				"que",
				"queue"
			],
			[
				"Bre",
				"bread_Crums"
			],
			[
				"pipm",
				"pimpRay\tstatement"
			],
			[
				"pimp",
				"pimpRay\tstatement"
			],
			[
				"orin",
				"origine\tparam"
			],
			[
				"direction",
				"direction_Calc\tfunction"
			],
			[
				"ori",
				"origine\tparam"
			],
			[
				"desti",
				"destination\tstatement"
			],
			[
				"dir",
				"direction\tstatement"
			],
			[
				"destina",
				"destination_courante\tstatement"
			],
			[
				"last",
				"last_cell\tstatement"
			],
			[
				"width",
				"widthC\tstatement"
			],
			[
				"best",
				"bestDest\tstatement"
			],
			[
				"Ex",
				"Explored_Cells\tstatement"
			],
			[
				"rang",
				"rangeX"
			],
			[
				"top",
				"topCan\tstatement"
			],
			[
				"coord",
				"coords\tfunction"
			],
			[
				"dirro",
				"dirrow_coord\tstatement"
			],
			[
				"topC",
				"topCoorder\tstatement"
			],
			[
				"ran",
				"rangeX"
			],
			[
				"off",
				"offX"
			],
			[
				"can",
				"Canvas\tclass"
			],
			[
				"bords",
				"bordSortY\tstatement"
			],
			[
				"bor",
				"bordSortY\tstatement"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/DragonVerSolitaire/DragonVerSolitaire_v0.3.py",
			"settings":
			{
				"buffer_size": 8644,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Tricoteuse.py",
			"settings":
			{
				"buffer_size": 17041,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/Entre_mon_enfant.py",
			"settings":
			{
				"buffer_size": 28109,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/fonctions_limites.py",
			"settings":
			{
				"buffer_size": 2822,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/asdf.py",
			"settings":
			{
				"buffer_size": 4140,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Salesman Node System Test V0.3 déconstruction.py",
			"settings":
			{
				"buffer_size": 19952,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Salesman Node System Test V0.3 avec ListeCoordsClass.py",
			"settings":
			{
				"buffer_size": 16567,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/ListeCoordsClass.py",
			"settings":
			{
				"buffer_size": 15721,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/VecteursClass.py",
			"settings":
			{
				"buffer_size": 3905,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/grid_testing.py",
			"settings":
			{
				"buffer_size": 3185,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/GridClass.py",
			"settings":
			{
				"buffer_size": 2882,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import tkinter as tk\nfrom tkinter.constants import *\nfrom random import randint as rint, random as rand, sample, choice\nfrom time import sleep, time\nfrom math import ceil\n\nfrom .homeImports.GridClass import Grid\n\n\ndef wBob():\n\n\troot = tk.Tk()\n\n\tLARG, HAUT = 600, 480\n\toffX, offY = 100, 100\n\troot.geometry('{}x{}+{}+{}'.format(LARG, HAUT, offX, offY))\n\n\tcan = tk.Canvas(root, width=LARG, height=HAUT, bg='black')\n\tcan.pack(fill=BOTH)\n\n\tpolice, pol_size, pol_style = 'Ink Free', 12, 'bold italic'\n\n\n\tgridOffX, gridOffY = 150, 60 \n\tgridLARG, gridHAUT = LARG-gridOffX-30, HAUT-gridOffY-30\n\tgridCell_Dimention = (20,20)\n\tgrid_nbCols , grid_nbLigs = int(gridLARG / gridCell_Dimention[0]), int(HAUT / gridCell_Dimention[1])\n\n\tprint('grid_nbCols et grid_nbLigs :', grid_nbCols , grid_nbLigs)\n\tgrid = Grid(gridLARG, gridHAUT, grid_nbCols, grid_nbLigs, offsetX=gridOffX, offsetY=gridOffY)\n\t\n\t# Pour dessiner les blocs du corps du serpent plus petit que la cellule.\n\tgridCell_10pX = grid.CellLARG*0.1 \n\tgridCell_10pY = grid.CellHAUT*0.1\n\n\t[ can.create_line(*grid.find_coord((col, 0)), *grid.find_coord((col, grid.nbLigs_)), fill='blue', width=2, state='hidden', tags='grid') for col in range(1, grid_nbCols)]\n\t[ can.create_line(*grid.find_coord((0, lig)), *grid.find_coord((grid.nbCols_, lig)), fill='blue', width=2, state='hidden', tags='grid') for lig in range(1, grid_nbLigs)]\n\n\tcan.create_line(*grid.find_coord((0, 0)), \t\t\t*grid.find_coord((grid_nbCols, 0)),\t\t\t\tfill='light blue', width=3, tags='frame')\n\tcan.create_line(*grid.find_coord((grid_nbCols, 0)), *grid.find_coord((grid_nbCols, grid_nbLigs)), \tfill='light blue', width=3, tags='frame')\n\tcan.create_line(*grid.find_coord((0, 0)), \t\t\t*grid.find_coord((0, grid_nbLigs)),\t\t\t\tfill='light blue', width=3, tags='frame')\n\tcan.create_line(*grid.find_coord((0, grid_nbLigs)), *grid.find_coord((grid_nbCols, grid_nbLigs)), \tfill='light blue', width=3, tags='frame')\n\n\tcan.create_text(gridOffX + (grid.rangeX[1]-grid.rangeX[0])/2 , gridOffY + (grid.rangeY[1]-grid.rangeY[0])/2, \n\t\t\t\t\ttext='PESEZ ENTER', anchor='center', fill='light green' , font=(police, 20, 'bold'), tags='TITLE')\n\t\t\t\t\n\n\troundy = lambda nb, tol=2: int(nb*(10**tol)+0.5)/(10**tol)\n\n\tsnake = [(1,1),(2,1)]\n\tsnake_peauMorte = []\n\tsnake_col = 'light green'\n\n\tlongueur = tk.IntVar(value=len(snake))\n\n\ttête = snake[-1]\n\ttêteOffset = [0,0]\n\tpomme = [rint(0,grid_nbCols-1), rint(0,grid_nbLigs-1)]\n\tpommeCoord = [*grid.find_coord( pomme ) ]\n\tdirection = 'D'\n\n\tPowerUp_onMap = False\n\tPowerUp_coord = [-1,-1]\n\tPowerUp_events = []\n\n\tgear = tk.IntVar(value=1)\n\t\n\tvitesse_Base = 500\n\tvitesse_actuelle = int(vitesse_Base / gear.get())\n\n\n\ttemps_total = tk.IntVar(value=1)\n\ttemps_dernPomme = time()\n\n\tscore_Base = 1000\n\tscore_actuelle = tk.IntVar(value=0)\n\n\n\ttry:\n\t\twith open('Snake_TopScores.txt', 'r') as TopFile:\t\n\t\t\tTopScore, TopTemps, TopLong, TopScoreSec = [ int(TopLig.split('=')[1].strip('\\n')) for TopLig in TopFile.readlines()]\n\n\texcept FileNotFoundError:\n\n\t\tTopScore = 0\n\t\tTopTemps = 0\n\t\tTopLong = 0\t\n\t\tTopScoreSec = 0\n\n\tprint('TopScoreSec :', TopScoreSec)\n\tGameOn = True\n\tGAMEOVER = False\n\n\t#Power-Up Shape\n\tdef PowerUp_gen():\n\t\tnonlocal PowerUp_coord, PowerUp_onMap\n\t\twhile True:\n\t\t\tPowerUp_coord[0], PowerUp_coord[1] = rint(0,grid_nbCols-1), rint(0,grid_nbLigs-1)\n\t\t\ttPow = tuple(PowerUp_coord)\n\t\t\tif tPow not in snake_peauMorte:\n\t\t\t\tbreak\n\t\tPowerUp_onMap = True\n\t\tprint('PowerUp_coord, PowerUp_onMap :', PowerUp_coord, PowerUp_onMap)\n\t\tShape_Base = (grid.find_coord(tPow), grid.find_coord((tPow[0]+1, tPow[1])))\n\t\tcL, cH = grid.CellLARG, grid.CellHAUT\n\t\tcan.create_polygon(*Shape_Base[0], *Shape_Base[1], Shape_Base[0][0] + cL/2, Shape_Base[0][1] + cH, fill='yellow', tags='PowerUp')\n\t\tcan.create_arc(Shape_Base[0][0] - cL/2, Shape_Base[0][1] - cH/2,Shape_Base[0][0] + cL*1.5, Shape_Base[0][1] + cH*1.5, outline='purple', start=0, extent=359.9, style='arc', width=2, tags='PowerUp')\n\n\tdef PowerUp_wipe():\n\t\tnonlocal PowerUp_onMap\n\t\tprint('PowerUp_coord, PowerUp_onMap :', PowerUp_coord, PowerUp_onMap)\n\t\ttry:\n\t\t\tcan.delete('PowerUp')\n\t\t\tPowerUp_onMap = False\n\t\texcept ValueError:\n\t\t\tprint('PowerUp déjà suprimé')\n\n\t\t\n\tdef PowerUp_eventWipe():\t\t\n\t\tfor event in PowerUp_events:\n\t\t\ttry:\n\t\t\t\tcan.after_cancel(event)\n\t\t\texcept ValueError:\n\t\t\t\tprint('PowerUp_event dàjà suprimé')\n\n\n\tPoof_congrats = {'WOW !', \"Qui l'aurrait cru !\", \"SsSsSuper!\", \"Tu m'émousilles !\", \"Incroyable !\"}\n\n\t\n\tdef RESET(event):\n\t\tnonlocal snake, longueur, tête, longueur, pomme, pommeCoord, direction, vitesse_Base, score_Base, GameOn, GAMEOVER, MainEvent\n\t\tnonlocal segmentsPool, snake_peauMorte, PowerUp_coord, PowerUp_onMap\n\t\tif GAMEOVER:\n\t\t\tcan.delete('snake')\n\n\t\t\tPoofMessage.set('')\n\t\t\tcan.itemconfig('Poof', text=PoofMessage.get(), font=(police, 24, pol_style), fill='white')\n\t\t\tcan.itemconfig('PoofSet', fill='white')\n\t\t\tcan.itemconfig('UI', fill='white')\t\t\n\t\t\tcan.config(bg='black')\n\n\n\t\t\tsnake = [(1,1),(2,1)]\n\t\t\tsnake_peauMorte = []\n\t\t\tlongueur.set(len(snake))\n\t\t\ttête = snake[-1]\n\t\t\tpomme = [rint(0,grid_nbCols-1), rint(0,grid_nbLigs-1)]\n\t\t\tpommeCoord = [*grid.find_coord( pomme ) ]\n\t\t\tdirection = 'D'\n\n\t\t\tPowerUp_onMap = False\n\t\t\tPowerUp_coord = [-1,-1]\n\n\t\t\tcan.delete('PowerUp')\n\n\t\t\tvitesse_Base = 500\n\t\t\tscore_Base = 1000\n\n\t\t\ttemps_total.set(0)\n\t\t\ttemps_dernPomme = time()\n\n\t\t\tscore_actuelle.set(0)\n\n\t\t\tGameOn = True\n\t\t\tGAMEOVER = False\n\n\t\t\tcan.itemconfig('pomme', fill='red')\n\t\t\tnouvelle_Pomme()\n\n\t\t\tfor segment in snake:\n\t\t\t\tsegCoord = segmentCoord(segment)\n\t\t\t\tcan.create_rectangle(*segCoord[0], *segCoord[1], fill= snake_col, tags='snake')\n\n\t\t\tMainEvent = 0\n\t\t\tsegmentsPool = sorted(list(can.find_withtag('snake')))\n\n\t\t\ttimer()\n\t\t\tMain()\n\n\n\tdef segmentCoord(index):\n\t\tcoord1 = tuple([ c + gridCell_10pX  for c in grid.find_coord(index)])\n\t\tcoord2 = ( coord1[0] + grid.CellLARG-(2*gridCell_10pX), coord1[1] + grid.CellHAUT-(2*gridCell_10pX) )\n\t\treturn (coord1, coord2)\n\n\n\tdef nouvelle_Pomme():\n\t\tnonlocal pomme, pommeCoord\n\t\twhile True:\n\t\t\tpomme[0], pomme[1] = (rint(0,grid_nbCols-1), rint(0,grid_nbLigs-1))\n\t\t\tif tuple(pomme) not in snake_peauMorte:\n\t\t\t\tbreak\n\t\tpommeCoord[0], pommeCoord[1] = grid.find_coord( pomme ) \n\t\tcan.coords('pomme', pommeCoord[0]+gridCell_10pX, pommeCoord[1]+gridCell_10pY, pommeCoord[0]+grid.CellLARG-gridCell_10pX, pommeCoord[1]+grid.CellHAUT-gridCell_10pY)\n\t\n\tdef zigzag(periode):\n\t\t# génère la sécance -1,0,0,1,1,0,0,-1, ...\n\t\ti = periode -1\n\t\twhile True:\n\t\t\tByte = '{0:03b}'.format( i )\n\t\t\tyield int(Byte[-2]) * (-1)**int(Byte[-3])\n\t\t\ti+=1\n\n\t\n\tfor segment in snake:\n\t\tsegCoord = segmentCoord(segment)\n\t\tcan.create_rectangle(*segCoord[0], *segCoord[1], fill= snake_col, state='hidden' ,tags='snake')\n\n\tcan.create_oval(pommeCoord[0]+gridCell_10pX, pommeCoord[1]+gridCell_10pY, pommeCoord[0]+grid.CellLARG-gridCell_10pX, pommeCoord[1]+grid.CellHAUT-gridCell_10pY,\n\tfill='red', outline='black', width=3, state='hidden' ,tags='pomme')\n\t\n\n\n\tmoveDict = {'G': \tlambda: (tête[0]-1 + têteOffset[0],  tête[1] \t+ têteOffset[1]),\t\n\t\t\t\t'D':\tlambda: (tête[0]+1 + têteOffset[0],  tête[1] \t+ têteOffset[1]), \n\t\t\t\t'H': \tlambda: (tête[0]   + têteOffset[0],  tête[1]-1 \t+ têteOffset[1]),\n\t\t\t\t'B':\tlambda: (tête[0]   + têteOffset[0],  tête[1]+1 \t+ têteOffset[1])}\n\n\n\n\tMainEvent = 0\n\tsegmentsPool = sorted(list(can.find_withtag('snake')))\n\tPowerUps_liste = [lambda: PowerUp_1, lambda: [ can.after(10000, PowerUp_eventWipe), PowerUp_zigzag()]]\n\n\tzzGen = zigzag(8)\n\n\tdef PowerUp_1():\n\t\tnonlocal snake_peauMorte, segmentsPool, PowerUp_onMap, PowerUp_time\n\n\t\tmidCut = longueur.get() / 2\n\t\tintMidCut = int(midCut)\n\t\tlongueur.set(ceil(midCut))\n\t\t[snake_peauMorte.append(snake.pop(0)) for seg in range(intMidCut)]\n\t\t[segmentsPool.pop(0) for seg in range(intMidCut)]\n\t\t#snake_peauMorte += snake[:midCut]\n\t\t\n\t\tPowerUp_wipe()\n\t\t\n\tdef PowerUp_zigzag():\n\t\tnonlocal têteOffset, PowerUp_events\n\t\tif direction in noGoodDirs[0]:\n\t\t\t#axe = 'Y'\n\t\t\ttêteOffset[1] = next(zzGen)\n\t\telse:\n\t\t\t#axe = 'X'\n\t\t\ttêteOffset[0] = next(zzGen)\n\n\t\tPowerUp_events.pop(-1)\n\t\tPowerUp_events += can.after(vitesse_actuelle, PowerUp_zigzag)\n\t\t\t\n\tdef Main():\n\t\tnonlocal snake, tête, longueur, pomme, MainEvent, segmentsPool, GAMEOVER, temps_dernPomme, score_actuelle, PowerUp_onMap, PowerUp_time\n\n\t\ttry:\t\t\t\ttête = moveDict[direction]()\n\t\texcept KeyError:\treturn None\n\n\t\tsnake += [tête]\n\t\t\n\t\tnewTête_Shape = segmentCoord(tête)\n\t\tcan.coords(segmentsPool[0], *newTête_Shape[0], *newTête_Shape[1] )\n\n\t\tsegmentsPool += [segmentsPool.pop(0)] # flip le dernier segment en première place/ en tête.\n\n\t\tif not (0 <= tête[0] < grid_nbCols) or not (0 <= tête[1] < grid_nbLigs) or tête in snake[:-1] or tête in snake_peauMorte:\n\t\t\tGAMEOVER_procedure()\n\t\t\treturn None\n\t\t\t\t\n\t\t#print('tête, snake_corps :',tête, snake[:-1])\n\n\t\tif tête == tuple(pomme):\n\t\t\tnouvelle_Pomme()\n\t\t\tlongueur.set(longueur.get() + 1)\n\n\t\t\tPoofMessage.set(sample(Poof_congrats,1)[0])\n\n\t\t\tsegCoord = segmentCoord(snake[0])\t\t\t\n\t\t\tsegmentsPool.insert(0, can.create_rectangle(*segCoord[0], *segCoord[1], fill=snake_col, tags='snake'))\n\t\t\t\n\t\t\tTIME = time()\n\t\t\tdepuis_dernPomme = TIME - temps_dernPomme\n\t\t\ttemps_dernPomme = TIME\n\n\t\t\tscore_actuelle.set( score_actuelle.get() + int(roundy(score_Base / depuis_dernPomme, tol=-1) ))\n\t\t\t\n\t\t\t\n\t\t\tif rand() < 0.3 and not PowerUp_onMap: \n\t\t\t\tPowerUp_gen()\n\t\t\t\tcan.after(10000, PowerUp_wipe)\n\n\t\telse:\n\t\t\tsnake.pop(0)\n\n\n\t\tif PowerUp_onMap:\n\t\t\t#print('tête, PowerUp_coord :', tête, PowerUp_coord)\n\t\t\tif tête == tuple(PowerUp_coord):\n\t\t\t\tPowerUp_1()\n\n\n\t\tif not GAMEOVER:\n\t\t\tMainEvent = can.after(vitesse_actuelle, Main)\n\n\n\tnoGoodDirs = [{'H', 'B'}, {'D', 'G'}]\n\tdirDict = {(0,1):'B',(0,-1):'H',(1,0):'D',(-1,0):'G'}\n\tdef directionChange(direct):\n\t\tnonlocal direction\n\t\tvraiDir = dirDict[(tête[0]-snake[-2][0], tête[1]-snake[-2][1])]\n\n\t\tif not ({vraiDir, direct} in noGoodDirs):\n\t\t\tdirection = direct\n\n\n\tPoof_timeoutEvent = 0\n\tdef PoofDisplay(*trace):\n\t\tnonlocal Poof_timeoutEvent\n\t\tmessage = PoofMessage.get()\n\t\tif message == 'GAME OVER !':\n\t\t\tcan.itemconfig('Poof', text=message, font=(police, 24, pol_style), state='normal', fill='black')\n\t\telse:\n\t\t\tcan.itemconfig('Poof', text=message, state='normal')\n\n\t\t\ttry:\t\t\t\t\tcan.after_cancel(Poof_timeoutEvent)\n\t\t\texcept ValueError:\t\tpass\n\n\t\t\tPoof_timeoutEvent = can.after(3000, PoofClear)\n\n\tdef PoofClear():\n\t\tcan.itemconfig('Poof', state='hidden')\n\t\tPoof_timeoutEvent = 0\n\n\tdef StartGame(event):\n\t\tnonlocal GameOn\n\t\tif MainEvent == 0 and not GAMEOVER:\n\t\t\tGameOn = True\n\t\t\ttimer()\n\t\t\tMain()\n\n\tdef StartGame_INIT(event):\n\t\tnonlocal GameOn\n\t\tcan.delete('TITLE')\n\t\tcan.itemconfig('grid', state='normal')\n\t\tcan.itemconfig('snake', state='normal')\n\t\tcan.itemconfig('pomme', state='normal')\n\t\tGameOn = True\n\t\tcan.bind('<Return>', StartGame)\n\t\ttimer()\n\t\tMain()\n\n\tdef PauseGame(event):\n\t\tnonlocal GameOn, MainEvent, timerEvent\n\t\tif GameOn:\n\t\t\tprint('PAUSE!')\n\t\t\tcan.after_cancel(MainEvent)\n\t\t\tcan.after_cancel(timerEvent)\n\n\t\t\tMainEvent = 0\n\t\t\ttimerEvent = 0\n\t\t\tGameOn = False\n\n\tdef GAMEOVER_procedure():\n\t\tnonlocal GAMEOVER, TopScore, TopLong, TopTemps, TopScoreSec\n\t\tGAMEOVER = True\n\t\tPauseGame(0)\n\t\tPoofMessage.set('GAME OVER !')\n\t\tcan.config(bg='white')\n\n\t\tfor item in can.find_withtag('snake'):\n\t\t\tcan.itemconfig(item, fill='black')\n\n\t\tcan.itemconfig('pomme', fill='black')\n\t\tcan.itemconfig('UI', fill='black')\t\t\n\n\n\t\tnewTop = False\n\t\tif score_actuelle.get() > TopScore:\n\t\t\tnewTop = True\n\t\t\tTopScore = score_actuelle.get()\n\t\t\tcan.itemconfig('TopScore', text=f'TopScore\\n   {TopScore}')\n\n\t\tif longueur.get() > TopLong:\n\t\t\tnewTop = True\n\t\t\tTopLong = longueur.get()\n\t\t\tcan.itemconfig('TopLong', text=f'TopLong\\n   {TopLong}')\n\n\t\tif temps_total.get() > TopTemps:\n\t\t\tnewTop = True\n\t\t\tTopTemps = temps_total.get()\n\t\t\tcan.itemconfig('TopTemps', text=f'TopTemps\\n   {TopTemps}')\n\n\t\tscoreSec = int(score_actuelle.get() / temps_total.get())\n\t\tif scoreSec > TopScoreSec:\n\t\t\tnewTop = True\n\t\t\tTopScoreSec = scoreSec\n\t\t\tcan.itemconfig('TopScoreSec', text=f'TopScore/sec\\n   {TopScoreSec}')\n\n\t\tif newTop:\n\t\t\twith open('Snake_TopScores.txt', 'w') as TopFile:\n\t\t\t\tTops = [f'TopScore={TopScore}\\n',f'TopTemps={TopTemps}\\n',f'TopLong={TopLong}\\n',f'TopScoreSec={scoreSec}\\n']\n\t\t\t\tTopFile.writelines(Tops)\n\n\n\tdef inputManager(event):\n\t\tkey = event.char\n\t\ttry:\n\t\t\tkey = int(key)\n\t\t\tif key in range(1,10): #Soit [1,9]\n\t\t\t\tgear.set(key)\n\n\t\texcept ValueError:\n\t\t\traise ValueError(f'key {key} invalide')\n\n\n\tdef gearShift(*trace):\n\t\tnonlocal vitesse_actuelle\t\t\n\t\tvitesse_actuelle = int(vitesse_Base / gear.get())\n\n\ttimerEvent = 0\n\tdef timer():\n\t\tnonlocal temps_total, timerEvent, vitesse_Base, score_Base\n\t\ttempT = temps_total.get()\t\t\n\t\ttemps_total.set(tempT + 1)\n\n\t\tif tempT % 10 == 0:\n\t\t\tvitesse_Base *= 0.95\n\t\t\tscore_Base *= 1.05\n\t\t\tgearShift(None)\t\n\n\t\ttimerEvent = can.after(1000, timer)\n\n\tdef UI_update(*trace):\n\t\tcan.itemconfig('temps', text= f'Temps\\n    {temps_total.get()}')\n\t\tcan.itemconfig('score', text= f'Score\\n    {score_actuelle.get()}')\n\t\tcan.itemconfig('long', text= f'Longueur\\n   {longueur.get()}')\n\n\tPoofMessage = tk.StringVar()\n\tPoofMessage.set('')\n\tPoofMessage.trace('w', PoofDisplay)\n\n\tcan.create_text(20, 30, text=PoofMessage.get() ,anchor='w', font=(police, 24, pol_style), fill='white', tags=['Poof','UI'])\n\n\tcan.create_text(20, 90, text= f'TopScore\\n   {TopScore}', anchor='w', font=(police, pol_size, pol_style), fill='white', tags=['TopScore', 'UI'])\n\tcan.create_text(20, 160, text= f'TopLong\\n    {TopLong}', anchor='w', font=(police, pol_size, pol_style), fill='white', tags=['TopLong','UI'])\n\tcan.create_text(20, 230, text= f'TopTemps\\n    {TopTemps}', anchor='w', font=(police, pol_size, pol_style), fill='white', tags=['TopTemps', 'UI'])\n\tcan.create_text(20, 300, text= f'TopScore/sec\\n    {TopScoreSec}', anchor='w', font=(police, pol_size, pol_style), fill='white', tags=['TopScoreSec', 'UI'])\n\n\tcan.create_text(LARG-20, 30, text= f'Score\\n    {score_actuelle.get()}', anchor='e', font=(police, pol_size, pol_style), fill='white', tags=['score','UI'])\n\tcan.create_text(LARG-130, 30, text= f'Longueur\\n    {longueur.get()}', anchor='e',font=(police, pol_size, pol_style), fill='white', tags=['long','UI'])\n\tcan.create_text(LARG-280, 30, text= f'Temps\\n    {temps_total.get()}', anchor='e', font=(police, pol_size, pol_style), fill='white', tags=['temps','UI'])\n\n\tcan.focus_set()\n\tcan.bind('<Left>', \tlambda event: directionChange('G'))\n\tcan.bind('<Right>', lambda event: directionChange('D'))\n\tcan.bind('<Up>', \tlambda event: directionChange('H'))\n\tcan.bind('<Down>', \tlambda event: directionChange('B'))\n\tcan.bind('<Return>', StartGame_INIT)\n\tcan.bind('<BackSpace>', PauseGame)\n\tcan.bind('<Delete>', RESET)\n\n\tcan.bind('<KeyPress>', inputManager)\n\tgear.trace('w', gearShift)\n\n\tlongueur.trace('w', UI_update)\n\tscore_actuelle.trace('w', UI_update)\n\ttemps_total.trace('w', UI_update)\n\n\t\n\n\troot.mainloop()\n\nwBob()",
			"file": "Snake_Game.py",
			"file_size": 15233,
			"file_write_time": 132173201944126641,
			"settings":
			{
				"buffer_size": 14710,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/cellularAutomata.py",
			"settings":
			{
				"buffer_size": 1967,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/voisinFinder.py",
			"settings":
			{
				"buffer_size": 22032,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/voisinFinderAlternatif_betafork.py",
			"settings":
			{
				"buffer_size": 10820,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Cercle_Fusion.py",
			"settings":
			{
				"buffer_size": 8645,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/cercle_intersect.py",
			"settings":
			{
				"buffer_size": 18747,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/dataToGraph.py",
			"settings":
			{
				"buffer_size": 19545,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/keyBinder.py",
			"settings":
			{
				"buffer_size": 20827,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/teste Fichier texte/dechifreurDeTexte.py",
			"settings":
			{
				"buffer_size": 1317,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/intersect.py",
			"settings":
			{
				"buffer_size": 8480,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/C code/C intro.c",
			"settings":
			{
				"buffer_size": 1166,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/timing_Password.py",
			"settings":
			{
				"buffer_size": 6372,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Sublime_Projects/monCoeur/coeur/monCoeur_fleurs volantes2.pyw",
			"settings":
			{
				"buffer_size": 6762,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Télé_Binaire.py",
			"settings":
			{
				"buffer_size": 5362,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/EnAccord.py",
			"settings":
			{
				"buffer_size": 1641,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "from winsound"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Le Raffineur Monailleur",
			"settings":
			{
				"buffer_size": 14360,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Thready/multithreading Pool.py",
			"settings":
			{
				"buffer_size": 4984,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Thready/multiProcessing2.py",
			"settings":
			{
				"buffer_size": 1559,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Optimal_Grouping.py",
			"settings":
			{
				"buffer_size": 4319,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/IanAntony/Desktop/Sublime Code/rotation_method.py",
			"settings":
			{
				"buffer_size": 10279,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/C++/C Single File.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"Pack",
				"Preferences: Browse Packages"
			],
			[
				"Package Control:  in",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ana",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"L",
				"View: Toggle Tabs"
			],
			[
				"contrp",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 596.0,
		"history":
		[
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 9999))",
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 51983))"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/IanAntony/Desktop/Sublime Code/homeImports/aplatisseur.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/getch() en pure ms.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Thready/aimlessPros.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/aplatisseur_func.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/setup.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/island_benchmarks.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/bingo/SymbolicRegression/Equation.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/tests/island_benchmarks.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/bingo/animation.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/bingo/Base/Island.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/bingo/Base/Chromosome.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/github/bingo-master/bingo/Base/__init__.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/voisinFinderAlternatif.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Tkinter_Soleil_bonheur.py",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/Lib/tkinter/__init__.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Threading Études.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/grid_testing.py",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/mdpopups/Preferences.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/Anaconda/README.md",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/User/SublimeCodeIntel.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/CodeComplice/CodeComplice.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/User/CodeComplice.sublime-settings",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/CodeComplice/Default (Windows).sublime-keymap",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/CodeComplice/Default (Windows).sublime-mousemap",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/SublimeCodeIntel/Default (Windows).sublime-keymap",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/Lib/threading.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/tpc.py",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/AutoPEP8/AutoPep8.sublime-settings",
		"/C/Users/IanAntony/Desktop/Sublime Code/cellularAutomata.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/chrBlockSearch.py",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/Lib/test/test_cmath.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/aplatisseur.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/test fraction simplificateur.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Entre mon enfant.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Matrice de rotation d'objet.png",
		"/C/Users/IanAntony/Desktop/Sublime Code/DistGaugeSublime.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/3535",
		"/C/Users/IanAntony/Desktop/Sublime Code/teste Fichier texte/dechifreurDeTexte.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Class_training.py",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/Lib/site-packages/future/moves/tkinter/ttk.py",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/Lib/site-packages/future/moves/tkinter/colorchooser.py",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/Lib/site-packages/PIL/_tkinter_finder.py",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/libs/_tkinter.lib",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/DLLs/_tkinter.pyd",
		"/C/Users/IanAntony/AppData/Local/Programs/Python/Python37/Lib/site-packages/gevent/__pycache__/threading.cpython-37.pyc",
		"/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Salesman Node System Test V0.2.1.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Salesman Node System Test V0.2.1 implémentation superNodes.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/homeImports/ListeCoordsClass.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/ListeCoordsClass.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/recursiveFactTree.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Salesman Node System Test V0.2.1 Expérimental.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/webScrapping lessons/actraMontrealScrapping.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/asdf.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Cercle_Fusion.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/permutationFunc test.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/DIM_GEN test.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/ContrAss.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/DragonVerSolitaire_vEnProgrès.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/DragonVerSolitaire/DragonVerSolitaire_v0.3.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/test_ttk.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/Tricoteuse.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/booty.py",
		"/C/Users/IanAntony/Desktop/Sublime Code/line_thrower.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/distributionRand test.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/DIM_GEN test.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/tpc.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/Entre mon enfant.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/monCoeur_fleurs volantes2.pyw",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/test_ttk.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/booty.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/Tkinter_Soleil_bonheur.py",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/Préhistoire Pythonesque/Hello human.py",
		"/C/Users/IanAntony/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/3535",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/MultiPerpMadness/MultiPerpMadness.sublime-project",
		"/C/Users/IanAntony/Desktop/Sublime 3 Code/MultiPerpMadness/MultiPerpMadness.sublime-workspace",
		"/C/Program Files/Sublime Text 3/crash_reporter.exe"
	],
	"find":
	{
		"height": 41.6
	},
	"find_in_files":
	{
		"height": 148.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"arc",
			"Be",
			"vitesse_Be",
			"Haut",
			"Bas",
			"Gauche",
			"Droite",
			"PoofMessage.set",
			"PoofDisplay",
			"parserDict",
			"UNIQUES_wipe",
			"actionParser",
			"actionSetting",
			"tao",
			"hypothenuse",
			"r",
			"allCoins[coin]['rangeVerti']",
			"allCoins[coin]['rangeHori']",
			"sin",
			"Vs",
			"debug",
			"range",
			"cardTypes",
			"essence",
			"Moispan",
			"frames",
			"Threa",
			"sommets = set(())\n\t\tprint('\\n CALCUL SOMMETS : \\n')\n\t\tprint('cellCoord :', cellCoord)\n\t\tprint('bords :', bords)\n\t\t## Trouve les sommets concaves. \n\t\tfor side in bords:\t\n\t\t\tif side == 'g':\n\t\t\t\tprint('côté g analysé')\n\t\t\t\ttry:\n\t\t\t\t\txTest , yTest = cellCoord[0]-1, cellCoord[1]-1\n\t\t\t\t\t#if Plan2D[cellCoord[0]-1][cellCoord[1]+1] == 1:\n\t\t\t\t\t\t#sommets+= (eval(coinCalc[index-1]),)\n\t\t\t\t\tprint(\"cellule {} envoyé à l'analyse. Résultat : {}\".format((xTest, yTest), Plan2D[xTest][yTest]))\n\t\t\t\t\tif Plan2D[xTest][yTest] == 1:\n\t\t\t\t\t\tif 0 <= xTest and 0 <= yTest:\n\t\t\t\t\t\t\tprint(\"cellule {} occupée, sommet {} confirmé valide\".format(Plan2D[xTest][yTest], eval(coinCalc[side])))\n\t\t\t\t\t\t\tsommets.update({eval(coinCalc[side])})\n\t\t\t\t\t\telse: raise IndexError\n\t\t\t\texcept IndexError:\n\t\t\t\t\tprint('Ne peut pas trouver de sommets hors-frontières.')\n\n\t\t\telif side == 'h':\n\t\t\t\tprint('côté h analysé')\n\t\t\t\ttry:\n\t\t\t\t\txTest , yTest = cellCoord[0]+1, cellCoord[1]-1\n\t\t\t\t\t#if Plan2D[cellCoord[0]-1][cellCoord[1]-1] == 1:\n\t\t\t\t\t#\tsommets+= (eval(coinCalc[index-1]),)\n\t\t\t\t\tprint(\"cellule {} envoyé à l'analyse. Résultat : {}\".format((xTest, yTest), Plan2D[xTest][yTest]))\n\t\t\t\t\tif Plan2D[xTest][yTest] == 1:\n\t\t\t\t\t\tif xTest < nbLignes and 0 <= yTest:\n\t\t\t\t\t\t\tprint(\"cellule {} occupée, sommet {} confirmé valide\".format(Plan2D[xTest][yTest], eval(coinCalc[side])))\n\t\t\t\t\t\t\tsommets.update({eval(coinCalc[side])})\n\t\t\t\t\t\telse: raise IndexError\n\t\t\t\texcept IndexError:\n\t\t\t\t\tprint('Ne peut pas trouver de sommets hors-frontières.')\n\n\t\t\telif side == 'd':\n\t\t\t\tprint('côté d analysé')\n\t\t\t\ttry:\n\t\t\t\t\txTest , yTest = cellCoord[0]+1, cellCoord[1]+1\n\t\t\t\t\t#if Plan2D[cellCoord[0]+1][cellCoord[1]-1] == 1:\n\t\t\t\t\t#\tsommets+= (eval(coinCalc[index-1]),)\n\t\t\t\t\tprint(\"cellule {} envoyé à l'analyse. Résultat : {}\".format((xTest, yTest), Plan2D[xTest][yTest]))\n\t\t\t\t\tif Plan2D[xTest][yTest] == 1:\n\t\t\t\t\t\tif xTest <= nbLignes and yTest <= nbColonnes:\n\t\t\t\t\t\t\tprint(\"cellule {} occupée, sommet {} confirmé valide\".format(Plan2D[xTest][yTest], eval(coinCalc[side])))\n\t\t\t\t\t\t\tsommets.update({eval(coinCalc[side])})\n\t\t\t\t\t\telse: raise IndexError\n\t\t\t\texcept IndexError:\n\t\t\t\t\tprint('Ne peut pas trouver de sommets hors-frontières.')\n\n\t\t\telif side == 'b':\n\t\t\t\tprint('côté b analysé')\n\t\t\t\ttry:\n\t\t\t\t\txTest , yTest = cellCoord[0]-1, cellCoord[1]+1\n\t\t\t\t\t#if Plan2D[cellCoord[0]+1][cellCoord[1]+1] == 1:\n\t\t\t\t\t#\tsommets+= (eval(coinCalc[index-1]),)\n\t\t\t\t\tprint(\"cellule {} envoyé à l'analyse. Résultat : {}\".format((xTest, yTest), Plan2D[xTest][yTest]))\n\t\t\t\t\tif Plan2D[xTest][yTest] == 1:\n\t\t\t\t\t\tif 0 <= xTest and yTest <= nbColonnes:\n\t\t\t\t\t\t\tprint(\"cellule {} occupée, sommet {} confirmé valide\".format(Plan2D[xTest][yTest], eval(coinCalc[side])))\n\t\t\t\t\t\t\tsommets.update({eval(coinCalc[side])})\n\t\t\t\t\t\telse: raise IndexError\n\t\t\t\texcept IndexError:\n\t\t\t\t\tprint('Ne peut pas trouver de sommets hors-frontières.')\n\t\t\t\n\t\t## Trouve les sommets convexes.\n\t\tfor index , coin in enumerate(coinCheck):\n\t\t\tif coin.issubset(bords):\n\t\t\t\tprint('Le coin {} se trouve dans {}. Le sommet {} est donc créé.'.format(coin, bords, eval(list(coinCalc.values())[index])))\n\t\t\t\tsommets.update({eval(list(coinCalc.values())[index])})\n\t\t\n\t\tprint('sommets :',sommets, '\\n')\n\t\treturn tuple(sommets)",
			"    ",
			"sort",
			"UnExplored_Trail_Backup",
			"array",
			"angle",
			"WIDTH",
			"HEIGHT",
			"    ",
			"type",
			"lenNodePoints",
			"legacyin",
			"NodeStruct",
			"nbpo",
			"dmoy",
			"NodeStruct_",
			"== type(0)",
			"== type('')",
			"NodesMaker",
			"superNodes",
			"issubsetListeCheck",
			"or_areSubset",
			"and_areSubset",
			"distCalc",
			"disCalc",
			"self.IndexLegacy",
			"len(self.Coords)",
			"labelOuIndex",
			"self.labels",
			"nbpoints",
			"|",
			"N1",
			"N2",
			"NodesCopy[index2]",
			"Nodes[index2]",
			"Nodes[index1]",
			"hideTrigger",
			"tempNodes",
			"op",
			"operator",
			"nbposs"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/DragonVerSolitaire/DragonVerSolitaire_v0.3.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8644,
						"regions":
						{
						},
						"selection":
						[
							[
								5863,
								5863
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3996.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Tricoteuse.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17041,
						"regions":
						{
						},
						"selection":
						[
							[
								16316,
								16316
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7832.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/Entre_mon_enfant.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28109,
						"regions":
						{
						},
						"selection":
						[
							[
								11480,
								10991
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8313.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/fonctions_limites.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2822,
						"regions":
						{
						},
						"selection":
						[
							[
								2170,
								2570
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1140.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/asdf.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4140,
						"regions":
						{
						},
						"selection":
						[
							[
								1699,
								1699
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 940.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Salesman Node System Test V0.3 déconstruction.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19952,
						"regions":
						{
						},
						"selection":
						[
							[
								1015,
								1015
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Salesman Node System Test V0.3 avec ListeCoordsClass.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16567,
						"regions":
						{
						},
						"selection":
						[
							[
								151,
								183
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/ListeCoordsClass.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15721,
						"regions":
						{
						},
						"selection":
						[
							[
								13135,
								13135
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/VecteursClass.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3905,
						"regions":
						{
						},
						"selection":
						[
							[
								1966,
								1966
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 527.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/grid_testing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3185,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/GridClass.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2882,
						"regions":
						{
						},
						"selection":
						[
							[
								1492,
								1492
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 84.8,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "Snake_Game.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14710,
						"regions":
						{
						},
						"selection":
						[
							[
								171,
								171
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/cellularAutomata.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1967,
						"regions":
						{
						},
						"selection":
						[
							[
								1820,
								1820
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1026.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/voisinFinder.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22032,
						"regions":
						{
						},
						"selection":
						[
							[
								12537,
								12537
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 27.0,
						"translation.y": 8477.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Grids and Shadows/voisinFinderAlternatif_betafork.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10820,
						"regions":
						{
						},
						"selection":
						[
							[
								4232,
								4232
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1705.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Cercle_Fusion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8645,
						"regions":
						{
						},
						"selection":
						[
							[
								7665,
								7668
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 538.2,
						"translation.y": 4120.8,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/cercle_intersect.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18747,
						"regions":
						{
						},
						"selection":
						[
							[
								16965,
								16965
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1653.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/dataToGraph.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19545,
						"regions":
						{
						},
						"selection":
						[
							[
								3630,
								3690
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1776.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/keyBinder.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20827,
						"regions":
						{
						},
						"selection":
						[
							[
								11016,
								11016
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 5068.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/teste Fichier texte/dechifreurDeTexte.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1317,
						"regions":
						{
						},
						"selection":
						[
							[
								495,
								495
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 616.8,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/homeImports/intersect.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8480,
						"regions":
						{
						},
						"selection":
						[
							[
								8480,
								8480
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 5191.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/C code/C intro.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1166,
						"regions":
						{
						},
						"selection":
						[
							[
								643,
								643
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1254.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/timing_Password.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6372,
						"regions":
						{
						},
						"selection":
						[
							[
								6307,
								6347
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 4151.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Sublime_Projects/monCoeur/coeur/monCoeur_fleurs volantes2.pyw",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6762,
						"regions":
						{
						},
						"selection":
						[
							[
								445,
								445
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Télé_Binaire.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5362,
						"regions":
						{
						},
						"selection":
						[
							[
								1422,
								1422
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3229.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/EnAccord.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1641,
						"regions":
						{
						},
						"selection":
						[
							[
								1090,
								1090
							]
						],
						"settings":
						{
							"auto_name": "from winsound",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Le Raffineur Monailleur",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14360,
						"regions":
						{
						},
						"selection":
						[
							[
								13417,
								13417
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 6984.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Thready/multithreading Pool.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4984,
						"regions":
						{
						},
						"selection":
						[
							[
								595,
								1218
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								}
							],
							"complete_parameters": false,
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Thready/multiProcessing2.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1559,
						"regions":
						{
						},
						"selection":
						[
							[
								975,
								975
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/Salesman Studies/Optimal_Grouping.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4319,
						"regions":
						{
						},
						"selection":
						[
							[
								4302,
								4302
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2631.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "/C/Users/IanAntony/Desktop/Sublime Code/rotation_method.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10279,
						"regions":
						{
						},
						"selection":
						[
							[
								8216,
								8216
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5994.4,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.autopep8":
	{
		"height": 127.0
	},
	"output.exec":
	{
		"height": 245.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 209.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "snakePoject.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 101.6,
		"last_filter": "fract",
		"selected_items":
		[
			[
				"fract",
				"fractionSelection"
			],
			[
				"one",
				"oneWayMatchCheck"
			],
			[
				"",
				"funcEfficiency"
			],
			[
				"limit",
				"limite"
			],
			[
				"efi",
				"funcEfficiency"
			],
			[
				"lime",
				"limite"
			],
			[
				"sin",
				"sinSelect"
			],
			[
				"coc",
				"troisPetitsCochons"
			],
			[
				"no",
				"noZero"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
